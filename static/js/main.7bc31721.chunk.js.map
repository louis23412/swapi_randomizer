{"version":3,"sources":["components&scripts/GetData.js","components&scripts/RandoBtn.js","containers/App.js","serviceWorker.js","index.js"],"names":["GetData","name","a","async","toLowerCase","message","data_promise","fetch","json","i","data","dataArray","results","random_number","Math","floor","random","length","result_obj","String","includes","toUpperCase","RandoBtn","handleClick","props","handler","onClick","this","Component","App","bind","state","view","setState","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTA8BeA,EA9BC,SAAMC,GAAN,2BAAAC,EAAAC,OAAA,uDACZF,EAAOA,EAAKG,cACRC,EAAU,GACVC,EAAe,KAHP,oBAAAJ,EAAA,MAKaK,MAAM,wBAA0BN,IAL7C,OAKRK,EALQ,uDAORA,EAAe,KAPP,YASRA,EATQ,oCAAAJ,EAAA,MAUWI,EAAaE,QAVxB,QAeR,IAASC,KALHC,EAVE,OAWFC,EAAYD,EAAKE,QACnBC,EAAgBC,KAAKC,MAAMD,KAAKE,SAAWN,EAAKE,QAAQK,QACtDC,EAAaP,EAAUE,GAInBM,OAAOD,EAAWT,IAAIW,SAAS,yBACd,YAAdD,OAAOV,IACO,WAAdU,OAAOV,KACZJ,GAAO,UAAOc,OAAOV,GAAGY,cAAjB,cAAoCH,EAAWT,GAA/C,OApBP,yBAuBDJ,GAvBC,QAyBRA,EAAU,+DAzBF,iCA2BLA,GA3BK,yDCoBDiB,G,iNAfXC,YAAc,0BAAArB,EAAAC,OAAA,uDACV,EAAKqB,MAAMC,QAAQ,eADT,WAAAvB,EAAA,MAESF,EAAQ,EAAKwB,MAAMvB,OAF5B,OAEJS,EAFI,OAGV,EAAKc,MAAMC,QAAQf,GAHT,sC,wEAOZ,OACE,4BAAQgB,QAAWC,KAAKJ,aACrBI,KAAKH,MAAMvB,U,GAVC2B,cCqCRC,E,YArCb,WAAYL,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,QAAU,EAAKA,QAAQK,KAAb,gBACf,EAAKC,MAAS,CAACC,KAAM,IAHJ,E,qEAMXvB,GACNkB,KAAKM,SAAS,CACZD,KAAMvB,M,+BAKR,OACE,yBAAKyB,UAAU,aACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aACb,6CACA,kGAEF,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAUjC,KAAK,QAAQwB,QAASE,KAAKF,UACrC,kBAAC,EAAD,CAAUxB,KAAK,SAASwB,QAASE,KAAKF,UACtC,kBAAC,EAAD,CAAUxB,KAAK,UAAUwB,QAASE,KAAKF,UACvC,kBAAC,EAAD,CAAUxB,KAAK,UAAUwB,QAASE,KAAKF,UACvC,kBAAC,EAAD,CAAUxB,KAAK,YAAYwB,QAASE,KAAKF,UACzC,kBAAC,EAAD,CAAUxB,KAAK,WAAWwB,QAASE,KAAKF,YAG5C,yBAAKS,UAAU,aACZP,KAAKI,MAAMC,KAAOL,KAAKI,MAAMC,KAAO,gE,GA/B7BJ,aCSEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7bc31721.chunk.js","sourcesContent":["const GetData = async name => {\n    name = name.toLowerCase();\n    let message = '';\n    let data_promise = null;\n    try {\n        data_promise = await fetch('https://swapi.co/api/' + name);\n    } catch {\n        data_promise = null;\n    }\n    if (data_promise) {\n        const data = await data_promise.json();\n        const dataArray = data.results\n        let random_number = Math.floor(Math.random() * data.results.length);\n        const result_obj = dataArray[random_number];\n\n        for (let i in result_obj) {\n            if (\n                !(String(result_obj[i]).includes('https://swapi.co/api')) \n                && !(String(i) === \"created\") \n                && !(String(i) === \"edited\")) {\n                message += `${String(i).toUpperCase()} : ${result_obj[i]}\\n`\n            }\n        }\n        return message\n    } else {\n        message = 'Data loading failed! Please press any button to try again...'\n    }\n    return message\n}\n\nexport default GetData;","import React, { Component } from 'react';\nimport GetData from './GetData';\nimport '../styling/btn.css'\n\nclass RandoBtn extends Component {\n    handleClick = async () => {\n        this.props.handler('Loading....')\n        const data = await GetData(this.props.name)\n        this.props.handler(data)\n    }\n  \n    render() {\n      return (\n        <button onClick = {this.handleClick}>\n          {this.props.name}\n        </button>\n      );\n    }\n}\n\nexport default RandoBtn;","import React, {Component} from 'react';\nimport RandoBtn from '../components&scripts/RandoBtn'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.handler = this.handler.bind(this)\n    this.state =  {view: ''}\n  }\n\n  handler(i) {\n    this.setState({\n      view: i\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"main-page\">\n        <div className=\"main-layout\">\n          <div className=\"main-text\">\n            <h1>STARWARS DATA</h1>\n            <p>Click a button below to generate random info on a starwars topic! </p>\n          </div>\n          <div className=\"random-buttons\">\n            <RandoBtn name=\"Films\" handler={this.handler}></RandoBtn>\n            <RandoBtn name=\"People\" handler={this.handler}></RandoBtn>\n            <RandoBtn name=\"Planets\" handler={this.handler}></RandoBtn>\n            <RandoBtn name=\"Species\" handler={this.handler}></RandoBtn>\n            <RandoBtn name=\"Starships\" handler={this.handler}></RandoBtn>\n            <RandoBtn name=\"Vehicles\" handler={this.handler}></RandoBtn>\n          </div>\n        </div>\n        <div className=\"info-view\">\n          {this.state.view ? this.state.view : 'Click on a button to generate random data on any topic!'}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styling/index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}